syntax = "proto3";
import public "toolkit.proto";

package sa;

option java_package = "demetra.sa.io.protobuf";
option java_outer_classname = "SaProtos";

enum ComponentType{
    UNDEFINED=0;
	SERIES=1;
    TREND=2;
    SEASONAL=3;
    SEASONALLYADJUSTED=4;
    IRREGULAR=5;
    CALENDAR=6;
}

enum DecompositionMode {
  UNKNOWN = 0;	
  /* Y = T + S + I) */
  ADDITIVE = 1;
  /* Y = T * S * I) */
  MULTIPLICATIVE = 2;
  /* Y = T * (S + I - 1) */
  PSEUDOADDITIVE = 3;
}

message Component{
	jd3.TsData data = 1;
	/* The length of stde should be the same as the length of data */
	repeated double stde = 2;
	int32 nbcasts = 3; 
	int32 nfcasts = 4;
}

message SaDecomposition{
	DecompositionMode mode = 1;
	Component series = 2;
	Component seasonally_adjusted = 3;
	Component trend = 4;
	Component seasonal = 5;
	Component irregular = 6;
}

enum BenchmarkingTarget {
	BENCH_TARGET_UNSPECIFIED = 0;
	BENCH_TARGET_ORIGINAL = 1;
	BENCH_TARGET_CALENDARADJUSTED = 2;
}

enum BenchmarkingBias {
	BENCH_BIAS_UNSPECIFIED = 0;
    BENCH_BIAS_NONE = 1;
	BENCH_BIAS_ADDITIVE = 2;
	BENCH_BIAS_MULTIPLICATIVE = 3;
}

message BenchmarkingSpec{
	bool enabled = 1;
	BenchmarkingTarget target = 2;
	double lambda = 3;
	double rho = 4;
	BenchmarkingBias bias = 5;
	bool forecast = 6;
}

message VarianceDecomposition{
	double cycle = 1;
	double seasonal = 2;
	double irregular = 3;
	double calendar = 4;
	double others = 5;
	double total = 6;
}

message Diagnostics{
	VarianceDecomposition variance_decomposition = 1;
	jd3.StatisticalTest seasonal_ftest_on_irregular = 2;
	jd3.StatisticalTest seasonal_ftest_on_sa = 3;
	jd3.StatisticalTest seasonal_qtest_on_irregular = 4;
	jd3.StatisticalTest seasonal_qtest_on_sa = 5;
	jd3.StatisticalTest td_ftest_on_irregular = 6;
	jd3.StatisticalTest td_ftest_on_sa = 7;
}
